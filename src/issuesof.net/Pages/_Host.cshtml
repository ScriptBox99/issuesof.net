@page "/"
@namespace IssuesOfDotNet.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

@using IssuesOfDotNet.Data; 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Issues of .NET</title>
    <base href="~/" />
    <link rel="icon" type="image/png" href="favicon.png">
    <link rel="stylesheet" media="(prefers-color-scheme: light)" href="~/css/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" media="(prefers-color-scheme: dark)" href="~/lib/forevolve/bootstrap-dark/dist/css/bootstrap-dark.min.css" />
    <link rel="stylesheet" href="~/lib/codemirror/codemirror.min.css">
    <link rel="stylesheet" href="~/lib/codemirror/theme/material-darker.min.css">
    <link rel="stylesheet" href="~/lib/codemirror/addon/hint/show-hint.min.css">
    <link rel="stylesheet" href="css/site.css" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="https://code.iconify.design/1/1.0.7/iconify.min.js"></script>

    <script>
        window.registerPage = function (dotNetObjRef) {
            window.invokeSearch = function (text) {
                dotNetObjRef.invokeMethodAsync('Search', text);
            }
        }
    </script>
    <script src="~/lib/codemirror/codemirror.min.js"></script>
    <script src="~/lib/codemirror/addon/hint/show-hint.min.js"></script>
    <script src="~/lib/codemirror/addon/mode/simple.min.js"></script>
    <script>
        @{
            var keywords = IssueDb.Querying.IssueQuery.SupportedKeys.ToJavaScriptRegexAlternation();
            var values = IssueDb.Querying.IssueQuery.SupportedValues.ToJavaScriptRegexAlternation();
        }
        CodeMirror.defineSimpleMode("github-query", {
            start: [
                {
                    regex: /"(?:[^\\]|\\.)*?(?:"|$)/,
                    token: "string"
                },
                {
                    regex: /(?:@keywords)\b/,
                    token: "keyword"
                },
                {
                    regex: /(?:@values)\b/,
                    token: "atom"
                },
                {
                    regex: /(?:@@today)\b/,
                    token: "atom"
                },
                {
                    regex: /(?:\:|or|not|-)\b/,
                    token: "operator"
                },
                {
                    regex: /[0-9$][\w$]*/,
                    token: "number"
                },
                {
                    regex: /[_a-zA-Z0-9$][\w$]*/,
                    token: "string"
                },
            ]
        });

        function getCodeMirrorTheme() {
            var theme = "default";

            if (window.matchMedia &&
                window.matchMedia('(prefers-color-scheme: dark)').matches) {
                theme = "material-darker";
            }

            return theme;
        }

        if (window.matchMedia) {
            window.matchMedia('(prefers-color-scheme: dark)')
                  .addEventListener('change', event => {
                      var codeMirror = document.querySelector('.CodeMirror');
                      var theme = getCodeMirrorTheme();
                      if (codeMirror) {
                          codeMirror.CodeMirror.setOption("theme", theme);
                      }
                  });
        }

        function getCompletions(cm, option) {
            var url = "api/completion"
            var cursor = cm.getCursor();
            var line = cm.getLine(cursor.line);

            return fetch(url + '?q=' + escape(line) + '&pos=' + cursor.ch, {
                method: 'get',
                headers: {
                    'Accept': 'application/json'
                }
            }).then(response => response.json()
            ).then(json => {
                json.from = CodeMirror.Pos(cursor.line, json.from);
                json.to = CodeMirror.Pos(cursor.line, json.to);
                return json;
            });
        }

        var observer = new MutationObserver(function (mutations, observer) {
            var codeMirror = document.querySelector('.CodeMirror');
            var myTextarea = document.querySelector('#myTextarea');

            if (!codeMirror && myTextarea) {

                var url = new URL(window.location.href);
                var searchParams = new URLSearchParams(url.search);
                var q = searchParams.get("q");
                if (!q || q.length == 0)
                    q = "is:open is:issue";

                var editor = CodeMirror.fromTextArea(myTextarea, {
                    lineNumbers: false,
                    tabSize: 2,
                    mode: 'github-query',
                    autofocus: true,
                    theme: getCodeMirrorTheme(),
                    extraKeys: {
                        "Ctrl-Space": "autocomplete",
                        "':'": function (cm) {
                            var curretCursorPosition = cm.getCursor();
                            cm.replaceRange(':', curretCursorPosition);
                            CodeMirror.commands.autocomplete(cm);
                        }
                    },
                    hintOptions: {
                        hint: getCompletions,
                        extraKeys: {
                            "Tab": function (cm, n) { n.pick() },
                            "Space": function (cm, n) {
                                n.pick()
                                var curretCursorPosition = cm.getCursor();
                                cm.replaceRange(' ', curretCursorPosition);
                            }
                        }
                    },
                    scrollbarStyle: 'null'
                });
                editor.setValue(q);
                editor.on("change", function (cm, changeObj) {
                    if (typeof invokeSearch == 'function')
                        invokeSearch(cm.getValue());
                });
                editor.on("beforeChange", function (cm, changeObj) {
                    var typedNewLine = changeObj.origin == '+input' &&
                        typeof changeObj.text == "object" &&
                        changeObj.text.join("") == "";

                    if (typedNewLine) {
                        return changeObj.cancel();
                    }

                    var pastedNewLine = changeObj.origin == 'paste' &&
                        typeof changeObj.text == "object" &&
                        changeObj.text.length > 1;

                    if (pastedNewLine) {
                        var newText = changeObj.text.join(" ");
                        return changeObj.update(null, null, [newText]);
                    }

                    return null;
                });
            }
        });
        observer.observe(document, {
            subtree: true,
            childList: true,
            attributes: true
        });
    </script>
</body>
</html>
